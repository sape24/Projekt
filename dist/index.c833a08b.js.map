{"mappings":"ACGA,IAAI,EAAa,SAAS,cAAc,CAAC,aACrC,EAAc,SAAS,cAAc,CAAC,cAO1C,SAAS,IACL,IAAI,EAAe,SAAS,cAAc,CAAC,aAGxC,AAAkB,CAAA,SAAlB,AAFS,OAAO,gBAAgB,CAAC,GAE3B,OAAO,CACZ,EAAa,KAAK,CAAC,OAAO,CAAG,QAE7B,EAAa,KAAK,CAAC,OAAO,CAAG,MAErC,CAeA,eAAe,IAEX,IAAI,EAAW,SAAS,cAAc,CAAC,iBAAiB,KAAK,CAE7D,GAAG,CAEC,IAAM,EAAW,MAAM,MAAM,CAAC,yDAAyD,EAAE,EAAA,CAAU,EAEnG,GAAI,CAAC,EAAS,EAAE,CACZ,MAAM,AAAI,MAAO,iDAKzB,IAAM,EAAO,MAAM,EAAS,IAAI,GAI5B,EAAM,WAAW,CAAI,CAAC,EAAE,CAAC,GAAG,EAC5B,EAAM,WAAW,CAAI,CAAC,EAAE,CAAC,GAAG,EAK5B,EAAM,SAAS,cAAc,CAAC,WAC9B,EAAS,SAAS,cAAc,CAAC,UAErC,EAAO,SAAS,CAAC,MAAM,CAAC,UAKxB,EAAI,GAAG,CAAG,CAAC,qDAAqD,EAAE,EAAI,IAAK,CAAC,EAAE,EAAI,IAAK,CAAC,EAAE,EAAI,IAAK,CAAC,EAAE,EAAI,IAAK,qBAAqB,EAAE,EAAI,CAAC,EAAE,EAAA,CAAK,CAElJ,EAAI,MAAM,CAAG,KACT,EAAO,SAAS,CAAC,GAAG,CAAC,SACzB,EAEA,EAAe,EAAK,EAEpB,CAAE,MAAO,EAAM,CACX,QAAQ,KAAK,CAAC,uBAAwB,EAAM,OAAO,CAEvD,CACJ,CAUA,eAAe,EAAe,CAAG,CAAE,CAAG,EAClC,GAAG,CACC,IAAM,EAAW,MAAM,MAAM,CAAC,+DAA+D,EAAE,EAAI,KAAK,EAAE,EAAA,CAAK,CAAE,CAC7G,QAAQ,CACJ,aAAc,0BAClB,CACJ,GAEA,GAAI,CAAC,EAAS,EAAE,CACZ,MAAM,AAAI,MAAO,iDAGzB,IAAM,EAAO,MAAM,EAAS,IAAI,IAChC,AAcJ,SAAgC,CAAI,EAChC,IAAM,EAAQ,EAAK,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,EAAG,IAC5C,EAAY,SAAS,aAAa,CAAC,sBAEzC,CAAA,EAAU,SAAS,CAAG,GAEtB,EAAM,OAAO,CAAC,AAAA,IACV,IAAM,EAAO,IAAI,KAAK,EAAS,IAAI,EAAE,kBAAkB,CAAC,QAAS,CAAC,KAAM,UAAW,OAAQ,SAAS,GAC9F,EAAO,EAAS,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAGpD,EAAO,EAAS,IAAI,CAAC,YAAY,EAAE,SAAS,sBACtC,EAAS,IAAI,CAAC,YAAY,EAAE,SAAS,sBACrC,EAEN,EAAM,SAAS,aAAa,CAAC,MAE7B,EAAW,SAAS,aAAa,CAAC,KACxC,CAAA,EAAS,WAAW,CAAG,EACvB,IAAM,EAAW,SAAS,aAAa,CAAC,KACxC,CAAA,EAAS,WAAW,CAAG,EAAO,MAC9B,IAAM,EAAW,SAAS,aAAa,CAAC,KACxC,CAAA,EAAS,WAAW,CAAG,EAAO,MAE9B,EAAI,WAAW,CAAC,GAChB,EAAI,WAAW,CAAC,GAChB,EAAI,WAAW,CAAC,GAEhB,EAAU,WAAW,CAAC,EAC1B,EACJ,EA5C2B,EACvB,CAAE,MAAO,EAAM,CACX,QAAQ,KAAK,CAAC,uBAAwB,EAAM,OAAO,CACvD,CACJ,CAlGA,EAAW,gBAAgB,CAAC,QAAS,GACrC,EAAY,gBAAgB,CAAC,QAAS,GAkBtC,AADkB,SAAS,cAAc,CAAC,aAChC,gBAAgB,CAAC,QAAS","sources":["<anon>","src/javascript/main.js"],"sourcesContent":["var $647be9e9e843caef$exports = {};\n\"use strict\";\n//skapar variablar av knapp elementen i html\nlet $647be9e9e843caef$var$openButton = document.getElementById(\"open-menu\");\nlet $647be9e9e843caef$var$closeButton = document.getElementById(\"close-menu\");\n//skapar en eventlistener som lyssnar efter när användare klickar på dessa element\n$647be9e9e843caef$var$openButton.addEventListener('click', $647be9e9e843caef$var$toggleMenu);\n$647be9e9e843caef$var$closeButton.addEventListener('click', $647be9e9e843caef$var$toggleMenu);\n//function som kollar ifall mobilmenyn visas eller inte när man trycker på respektive knapp, om den inte visas så visas den och vice versa. Den ändrar knappens css ifall display är none till block annars ändras den till none\nfunction $647be9e9e843caef$var$toggleMenu() {\n    let mobileMenuEl = document.getElementById(\"mobilemenu\");\n    let style = window.getComputedStyle(mobileMenuEl);\n    if (style.display === \"none\") mobileMenuEl.style.display = \"block\";\n    else mobileMenuEl.style.display = \"none\";\n}\n/**\r\n * Hämtar sökknappen och lägger till en eventlistener för att anropa sökfunktionen\r\n * @constant {HTMLElement} searchBut - Sökknappen i DOM\r\n */ const $647be9e9e843caef$var$searchBut = document.getElementById('searchbut');\n$647be9e9e843caef$var$searchBut.addEventListener('click', $647be9e9e843caef$var$searchlocation);\n/**\r\n * Funktion för att söka i kartan med hjälp av Openstreetmaps nominatim API\r\n * @async\r\n * @function searchlocation\r\n */ async function $647be9e9e843caef$var$searchlocation() {\n    //Hämtar användarens inmatning från textfältet\n    let location = document.getElementById('locationinput').value;\n    try {\n        //Hämtar API baserat på vad användaren matat in\n        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${location}`);\n        if (!response.ok) throw new Error(\"N\\xe4tverksproblem - felaktigt svar fr\\xe5n servern\");\n        //omvandlar API-svaret till JSON\n        const data = await response.json();\n        //Latitude från platsen, parsefloat för att parsea strängen till ett nummer\n        let lat = parseFloat(data[0].lat);\n        let lon = parseFloat(data[0].lon);\n        /**\r\n     * iframe elementet där kartan visas\r\n     * @constant {HTMLElement} map - iframe i DOM\r\n     */ let map = document.getElementById('mapcont');\n        let loader = document.getElementById('loader');\n        loader.classList.remove('hidden');\n        /**\r\n     * Url som visarr kartan i iframen beserat på det hämtade korodinaterna\r\n     * @constant {string} map.src - OpenStreetMap inbäddad kart url\r\n     */ map.src = `https://www.openstreetmap.org/export/embed.html?bbox=${lon - 0.01},${lat - 0.01},${lon + 0.01},${lat + 0.01}&layer=mapnik&marker=${lat},${lon}`;\n        map.onload = ()=>{\n            loader.classList.add('hidden');\n        };\n        $647be9e9e843caef$var$getWeatherData(lat, lon);\n    } catch (error) {\n        console.error('Det uppstod ett fel:', error.message);\n    }\n}\n/**\r\n * Hämtar väderdatan från det meteorologiska institutet i norge med angiven longitud och latitud tagen från funktionen searchlocation()\r\n * Om inga fel uppstår skickas datan vidare till displayweatherforecast()\r\n * \r\n * @async\r\n * @function\r\n * @param {number} lat - Latitud for platsen \r\n * @param {number} lon - Longitud för platsen\r\n */ async function $647be9e9e843caef$var$getWeatherData(lat, lon) {\n    try {\n        const response = await fetch(`https://api.met.no/weatherapi/locationforecast/2.0/compact?lat=${lat}&lon=${lon}`, {\n            headers: {\n                'User-Agent': 'sape2402@student.miun.se'\n            }\n        });\n        if (!response.ok) throw new Error(\"N\\xe4tverksproblem - felaktigt svar fr\\xe5n servern\");\n        const data = await response.json();\n        $647be9e9e843caef$var$displayWeatherforecast(data);\n    } catch (error) {\n        console.error('Det uppstod ett fel:', error.message);\n    }\n}\n/**\r\n * Visar det kommande 24-timmars väderprognos i en HTML-Tabell\r\n * \r\n * @function\r\n * @param {Object} data - JSON-data från norges meteorologiska instituts väder-API\r\n * @param {Object[]} data.properties.timeseries - Array med väderprognoser per timme\r\n */ function $647be9e9e843caef$var$displayWeatherforecast(data) {\n    const hours = data.properties.timeseries.slice(0, 24);\n    const tableBody = document.querySelector('#weatherTable tbody');\n    tableBody.innerHTML = '';\n    hours.forEach((forecast)=>{\n        const time = new Date(forecast.time).toLocaleTimeString('sv-SE', {\n            hour: '2-digit',\n            minute: '2-digit'\n        });\n        const temp = forecast.data.instant.details.air_temperature;\n        //Kollar om regndata finns för nästa timme, annars nästa 6 timmar om ingen finns visas 0 mm\n        const rain = forecast.data.next_1_hours?.details?.precipitation_amount ?? forecast.data.next_6_hours?.details?.precipitation_amount ?? 0;\n        const row = document.createElement('tr');\n        const timeCell = document.createElement('td');\n        timeCell.textContent = time;\n        const tempCell = document.createElement('td');\n        tempCell.textContent = temp + \" \\xb0C\";\n        const rainCell = document.createElement('td');\n        rainCell.textContent = rain + ' mm';\n        row.appendChild(timeCell);\n        row.appendChild(tempCell);\n        row.appendChild(rainCell);\n        tableBody.appendChild(row);\n    });\n}\n\n\n//# sourceMappingURL=index.c833a08b.js.map\n","\"use strict\"\r\n\r\n//skapar variablar av knapp elementen i html\r\nlet openButton = document.getElementById(\"open-menu\")\r\nlet closeButton = document.getElementById(\"close-menu\")\r\n\r\n\r\n//skapar en eventlistener som lyssnar efter när användare klickar på dessa element\r\nopenButton.addEventListener('click', toggleMenu)\r\ncloseButton.addEventListener('click', toggleMenu)\r\n//function som kollar ifall mobilmenyn visas eller inte när man trycker på respektive knapp, om den inte visas så visas den och vice versa. Den ändrar knappens css ifall display är none till block annars ändras den till none\r\nfunction toggleMenu(){\r\n    let mobileMenuEl = document.getElementById(\"mobilemenu\")\r\n    let style = window.getComputedStyle(mobileMenuEl)\r\n\r\n    if(style.display === \"none\") {\r\n        mobileMenuEl.style.display = \"block\";\r\n    } else{\r\n        mobileMenuEl.style.display = \"none\"\r\n    }\r\n}\r\n\r\n/**\r\n * Hämtar sökknappen och lägger till en eventlistener för att anropa sökfunktionen\r\n * @constant {HTMLElement} searchBut - Sökknappen i DOM\r\n */\r\nconst searchBut = document.getElementById('searchbut')\r\nsearchBut.addEventListener('click', searchlocation)\r\n\r\n/**\r\n * Funktion för att söka i kartan med hjälp av Openstreetmaps nominatim API\r\n * @async\r\n * @function searchlocation\r\n */\r\n\r\nasync function searchlocation(){\r\n    //Hämtar användarens inmatning från textfältet\r\n    let location = document.getElementById('locationinput').value;\r\n    \r\n    try{\r\n        //Hämtar API baserat på vad användaren matat in\r\n        const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${location}`);\r\n\r\n        if (!response.ok){\r\n            throw new Error ('Nätverksproblem - felaktigt svar från servern');\r\n        }\r\n    \r\n    //omvandlar API-svaret till JSON\r\n    \r\n    const data = await response.json();\r\n    \r\n    //Latitude från platsen, parsefloat för att parsea strängen till ett nummer\r\n     \r\n    let lat = parseFloat(data[0].lat)\r\n    let lon = parseFloat(data[0].lon)\r\n    /**\r\n     * iframe elementet där kartan visas\r\n     * @constant {HTMLElement} map - iframe i DOM\r\n     */\r\n    let map = document.getElementById('mapcont')\r\n    let loader = document.getElementById('loader')\r\n\r\n    loader.classList.remove('hidden')\r\n    /**\r\n     * Url som visarr kartan i iframen beserat på det hämtade korodinaterna\r\n     * @constant {string} map.src - OpenStreetMap inbäddad kart url\r\n     */\r\n    map.src = `https://www.openstreetmap.org/export/embed.html?bbox=${lon-0.01},${lat-0.01},${lon+0.01},${lat+0.01}&layer=mapnik&marker=${lat},${lon}`\r\n\r\n    map.onload = () => {\r\n        loader.classList.add('hidden')\r\n    }\r\n\r\n    getWeatherData(lat, lon)\r\n\r\n    } catch (error){\r\n        console.error('Det uppstod ett fel:', error.message);\r\n\r\n    }\r\n}\r\n/**\r\n * Hämtar väderdatan från det meteorologiska institutet i norge med angiven longitud och latitud tagen från funktionen searchlocation()\r\n * Om inga fel uppstår skickas datan vidare till displayweatherforecast()\r\n * \r\n * @async\r\n * @function\r\n * @param {number} lat - Latitud for platsen \r\n * @param {number} lon - Longitud för platsen\r\n */\r\nasync function getWeatherData(lat, lon){\r\n    try{\r\n        const response = await fetch(`https://api.met.no/weatherapi/locationforecast/2.0/compact?lat=${lat}&lon=${lon}`, {\r\n            headers:{\r\n                'User-Agent': 'sape2402@student.miun.se'\r\n            }\r\n        });\r\n\r\n        if (!response.ok){\r\n            throw new Error ('Nätverksproblem - felaktigt svar från servern');\r\n        }\r\n\r\n    const data = await response.json();\r\n    displayWeatherforecast(data);\r\n    } catch (error){\r\n        console.error('Det uppstod ett fel:', error.message);\r\n    }\r\n}\r\n\r\n/**\r\n * Visar det kommande 24-timmars väderprognos i en HTML-Tabell\r\n * \r\n * @function\r\n * @param {Object} data - JSON-data från norges meteorologiska instituts väder-API\r\n * @param {Object[]} data.properties.timeseries - Array med väderprognoser per timme\r\n */\r\n\r\nfunction displayWeatherforecast(data){\r\n    const hours = data.properties.timeseries.slice(0, 24)\r\n    const tableBody = document.querySelector('#weatherTable tbody');\r\n\r\n    tableBody.innerHTML = '';\r\n\r\n    hours.forEach(forecast => {\r\n        const time = new Date(forecast.time).toLocaleTimeString('sv-SE', {hour: '2-digit', minute: '2-digit'})\r\n        const temp = forecast.data.instant.details.air_temperature;\r\n\r\n        //Kollar om regndata finns för nästa timme, annars nästa 6 timmar om ingen finns visas 0 mm\r\n        const rain = forecast.data.next_1_hours?.details?.precipitation_amount ??\r\n                    forecast.data.next_6_hours?.details?.precipitation_amount ??\r\n                    0;\r\n\r\n        const row = document.createElement('tr')\r\n\r\n        const timeCell = document.createElement('td')\r\n        timeCell.textContent = time \r\n        const tempCell = document.createElement('td')\r\n        tempCell.textContent = temp + ' °C'\r\n        const rainCell = document.createElement('td')\r\n        rainCell.textContent = rain + ' mm'\r\n        \r\n        row.appendChild(timeCell)\r\n        row.appendChild(tempCell)\r\n        row.appendChild(rainCell)\r\n\r\n        tableBody.appendChild(row)\r\n    });   \r\n}\r\n\r\n\r\n\r\n"],"names":["$647be9e9e843caef$var$openButton","document","getElementById","$647be9e9e843caef$var$closeButton","$647be9e9e843caef$var$toggleMenu","mobileMenuEl","style","window","getComputedStyle","display","$647be9e9e843caef$var$searchlocation","location","value","response","fetch","ok","Error","data","json","lat","parseFloat","lon","map","loader","classList","remove","src","onload","add","$647be9e9e843caef$var$getWeatherData","error","console","message","headers","$647be9e9e843caef$var$displayWeatherforecast","hours","properties","timeseries","slice","tableBody","querySelector","innerHTML","forEach","forecast","time","Date","toLocaleTimeString","hour","minute","temp","instant","details","air_temperature","rain","next_1_hours","precipitation_amount","next_6_hours","row","createElement","timeCell","textContent","tempCell","rainCell","appendChild","addEventListener","$647be9e9e843caef$var$searchBut"],"version":3,"file":"index.c833a08b.js.map"}